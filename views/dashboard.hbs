<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{{title}}</title>
  <style>
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
      color: #333;
      background-color: #f8f9fa;
    }
    h1, h2, h3 {
      color: #2c3e50;
    }
    h1 {
      border-bottom: 2px solid #3498db;
      padding-bottom: 10px;
      margin-bottom: 20px;
    }
    .header-container {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
    }
    .refresh-btn {
      background-color: #2980b9;
      color: white;
      border: none;
      padding: 8px 15px;
      font-size: 0.9em;
      border-radius: 4px;
      cursor: pointer;
      margin-left: 10px;
    }
    .actions-container {
      display: flex;
      align-items: center;
    }
    .export-options {
      display: flex;
      margin-left: 15px;
    }
    .export-btn {
      display: inline-flex;
      align-items: center;
      padding: 8px 15px;
      border-radius: 4px;
      text-decoration: none;
      color: white;
      font-size: 0.9em;
      margin-left: 10px;
      transition: all 0.3s;
    }
    .export-btn:hover {
      opacity: 0.9;
    }
    .excel-btn {
      background-color: #1E7145;
    }
    .pdf-btn {
      background-color: #D04423;
    }
    .export-icon {
      margin-right: 5px;
    }
    .dashboard-grid {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 20px;
      margin-bottom: 30px;
    }
    .card {
      background-color: white;
      border-radius: 8px;
      padding: 20px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .full-width {
      grid-column: 1 / -1;
    }
    table {
      width: 100%;
      border-collapse: collapse;
      margin: 15px 0;
      font-size: 0.9em;
    }
    th, td {
      border: 1px solid #ddd;
      padding: 8px;
      text-align: left;
    }
    th {
      background-color: #f2f2f2;
      font-weight: bold;
      position: sticky;
      top: 0;
    }
    .table-container {
      max-height: 400px;
      overflow-y: auto;
      margin-bottom: 15px;
    }
    .rating-display {
      font-weight: bold;
      padding: 3px 8px;
      border-radius: 4px;
      display: inline-block;
      text-align: center;
      min-width: 30px;
    }
    .rating-1 { background-color: #e74c3c; color: white; }
    .rating-2 { background-color: #e67e22; color: white; }
    .rating-3 { background-color: #f1c40f; color: white; }
    .rating-4 { background-color: #2ecc71; color: white; }
    .rating-5 { background-color: #27ae60; color: white; }
    
    .ranking-number {
      display: inline-block;
      width: 24px;
      height: 24px;
      background-color: #3498db;
      color: white;
      border-radius: 50%;
      text-align: center;
      line-height: 24px;
      margin-right: 8px;
      font-weight: bold;
    }
    .progress-container {
      width: 100%;
      height: 10px;
      background-color: #ecf0f1;
      border-radius: 5px;
      overflow: hidden;
      margin-top: 5px;
    }
    .progress-bar {
      height: 100%;
      background-color: #2980b9;
    }
    .progress-text {
      font-size: 0.8em;
      margin-top: 3px;
      text-align: right;
    }
    .volver {
      display: inline-block;
      margin-bottom: 20px;
      color: #2980b9;
      text-decoration: none;
    }
    .volver:hover {
      text-decoration: underline;
    }
    .last-update {
      font-size: 0.8em;
      color: #7f8c8d;
      text-align: right;
      margin-top: 5px;
    }
    .tabs {
      display: flex;
      margin-bottom: 20px;
    }
    .tab {
      padding: 10px 20px;
      background-color: #eee;
      cursor: pointer;
      border-radius: 4px 4px 0 0;
      margin-right: 5px;
    }
    .tab.active {
      background-color: white;
      font-weight: bold;
      border-top: 3px solid #3498db;
    }
  </style>
</head>
<body>
  <div class="header-container">
    <h1>Dashboard de Evaluaciones en Tiempo Real</h1>
    <div class="actions-container">
      <button id="refresh-btn" class="refresh-btn">‚Üª Actualizar datos</button>
      <div id="export-options" class="export-options" style="display: none;">
        <a href="/evaluaciones/exportar/excel" class="export-btn excel-btn">
          <span class="export-icon">üìä</span> Exportar a Excel
        </a>
        <a href="/evaluaciones/exportar/pdf" class="export-btn pdf-btn">
          <span class="export-icon">üìÑ</span> Exportar a PDF
        </a>
      </div>
    </div>
  </div>
  
  <a href="/" class="volver">‚Üê Volver al inicio</a>
  
  <div class="dashboard-grid">
    <!-- Tabla completa de resultados -->
    <div class="card full-width">
      <h2>Tabla de Resultados por Criterio</h2>
      <div class="table-container">
        <table id="resultados-table">
          <thead>
            <tr>
              <th>Videojuego</th>
              <th>Equipo</th>
              {{#each criterios}}
                <th>{{this}}</th>
              {{/each}}
              <th>Promedio Final</th>
            </tr>
          </thead>
          <tbody>
            {{#each consolidaciones}}
              <tr>
                <td><a href="/evaluaciones/detalle?id={{id_videojuego}}">{{nombre_videojuego}}</a></td>
                <td>{{equipo}}</td>
                {{#each ../criterios}}
                  <td>
                    {{#with (buscarCriterio ../criterios this)}}
                      <span class="rating-display rating-{{calcularRatingClase promedio}}">{{promedio}}</span>
                    {{/with}}
                  </td>
                {{/each}}
                <td><strong>{{promedio_total}}</strong></td>
              </tr>
            {{/each}}
          </tbody>
        </table>
      </div>
      <div class="last-update">√öltima actualizaci√≥n: <span id="last-update-time">{{formatDate now}}</span></div>
    </div>
    
    <!-- Ranking general -->
    <div class="card">
      <h2>Ranking General</h2>
      <div class="table-container">
        <table id="ranking-table">
          <thead>
            <tr>
              <th>Posici√≥n</th>
              <th>Videojuego</th>
              <th>Promedio</th>
            </tr>
          </thead>
          <tbody>
            {{#each rankingVideojuegos}}
              <tr>
                <td>
                  <div class="ranking-number">{{add @index 1}}</div>
                </td>
                <td><a href="/evaluaciones/detalle?id={{id_videojuego}}">{{nombre_videojuego}}</a></td>
                <td><span class="rating-display rating-{{calcularRatingClase promedio_total}}">{{promedio_total}}</span></td>
              </tr>
            {{/each}}
          </tbody>
        </table>
      </div>
    </div>
    
    <!-- Estado de evaluaciones -->
    <div class="card">
      <h2>Estado de Evaluaciones</h2>
      <div class="table-container">
        <table id="estado-table">
          <thead>
            <tr>
              <th>Videojuego</th>
              <th>Progreso</th>
            </tr>
          </thead>
          <tbody>
            {{#each progresoEvaluaciones}}
              <tr>
                <td><a href="/evaluaciones/detalle?id={{id_videojuego}}">{{nombre_videojuego}}</a></td>
                <td>
                  <div class="progress-container">
                    <div class="progress-bar" style="width: {{porcentaje_completado}}%"></div>
                  </div>
                  <div class="progress-text">
                    {{jurados_evaluaron}} de {{total_jurados}} jurados ({{porcentaje_completado}}%)
                  </div>
                </td>
              </tr>
            {{/each}}
          </tbody>
        </table>
      </div>
    </div>
    
    <!-- Analytics Section -->
    <div class="card full-width">
      <h2>An√°lisis de Evaluaciones</h2>
      <div class="tabs">
        <div class="tab active" data-tab="top3">Top 3 Videojuegos</div>
        <div class="tab" data-tab="distribucion">Distribuci√≥n por Materia</div>
      </div>
      
      <div class="tab-content active" id="top3-content">
        <div class="chart-container" style="position: relative; height:400px;">
          <canvas id="top3Chart"></canvas>
        </div>
      </div>
      
      <div class="tab-content" id="distribucion-content">
        <div class="chart-container" style="position: relative; height:400px;">
          <canvas id="distribucionChart"></canvas>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Agregar Chart.js -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  
  <script>
    // Actualizar la p√°gina autom√°ticamente cada 30 segundos
    let refreshInterval = setInterval(() => {
      document.getElementById('refresh-btn').click();
    }, 30000);
    
    document.getElementById('refresh-btn').addEventListener('click', function() {
      location.reload();
    });
    
    // Funci√≥n para verificar si el usuario es administrador o jurado y mostrar opciones de exportaci√≥n
    function verificarPermisos() {
      // En una aplicaci√≥n real, esta informaci√≥n vendr√≠a del backend
      // Como ejemplo, usamos localStorage para simular un tipo de usuario (admin, jurado, participante)
      const userRole = localStorage.getItem('userRole') || '';
      
      if (userRole === 'admin' || userRole === 'jurado') {
        document.getElementById('export-options').style.display = 'flex';
      }
    }
    
    // Funci√≥n para establecer el rol de usuario (SOLO PARA DEMOSTRACION)
    function setUserRole(role) {
      localStorage.setItem('userRole', role);
      verificarPermisos();
    }
    
    // Crear panel de control temporal para demostraci√≥n de roles
    function crearPanelRoles() {
      const panelDiv = document.createElement('div');
      panelDiv.className = 'role-panel';
      panelDiv.style.position = 'fixed';
      panelDiv.style.bottom = '20px';
      panelDiv.style.right = '20px';
      panelDiv.style.background = '#f8f9fa';
      panelDiv.style.padding = '10px';
      panelDiv.style.borderRadius = '5px';
      panelDiv.style.boxShadow = '0 2px 5px rgba(0,0,0,0.2)';
      
      panelDiv.innerHTML = `
        <div style="margin-bottom: 5px; font-weight: bold;">Simular Rol:</div>
        <button onclick="setUserRole('admin')" style="margin-right: 5px; padding: 3px 8px;">Admin</button>
        <button onclick="setUserRole('jurado')" style="margin-right: 5px; padding: 3px 8px;">Jurado</button>
        <button onclick="setUserRole('participante')" style="padding: 3px 8px;">Participante</button>
      `;
      
      document.body.appendChild(panelDiv);
    }
    
    // Inicializar cuando se cargue la p√°gina
    window.addEventListener('DOMContentLoaded', () => {
      cargarAnalytics();
      verificarPermisos();
      crearPanelRoles(); // Solo para demostraci√≥n
    });
    
    // Funci√≥n para cambiar pesta√±as
    document.querySelectorAll('.tab').forEach(tab => {
      tab.addEventListener('click', () => {
        // Desactivar todas las pesta√±as
        document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
        document.querySelectorAll('.tab-content').forEach(c => c.classList.remove('active'));
        
        // Activar la pesta√±a seleccionada
        tab.classList.add('active');
        document.getElementById(`${tab.dataset.tab}-content`).classList.add('active');
      });
    });
    
    // Cargar datos de analytics y crear gr√°ficos
    async function cargarAnalytics() {
      try {
        const response = await fetch('/evaluaciones/analytics');
        const data = await response.json();
        
        // Crear gr√°fico Top 3
        crearGraficoTop3(data.top3Videojuegos);
        
        // Crear gr√°fico de distribuci√≥n por materia
        crearGraficoDistribucion(data.distribucionPorMateria);
      } catch (error) {
        console.error('Error al cargar datos de analytics:', error);
      }
    }
    
    function crearGraficoTop3(top3) {
      const ctx = document.getElementById('top3Chart').getContext('2d');
      
      // Colores para los videojuegos
      const backgroundColors = [
        'rgba(255, 99, 132, 0.7)',
        'rgba(54, 162, 235, 0.7)',
        'rgba(255, 206, 86, 0.7)'
      ];
      
      const borderColors = [
        'rgba(255, 99, 132, 1)',
        'rgba(54, 162, 235, 1)',
        'rgba(255, 206, 86, 1)'
      ];
      
      new Chart(ctx, {
        type: 'bar',
        data: {
          labels: top3.map(vj => vj.nombre),
          datasets: [{
            label: 'Promedio de Calificaci√≥n',
            data: top3.map(vj => vj.promedio),
            backgroundColor: backgroundColors,
            borderColor: borderColors,
            borderWidth: 1
          }]
        },
        options: {
          indexAxis: 'y',
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            title: {
              display: true,
              text: 'Top 3 Videojuegos con Mejor Calificaci√≥n',
              font: {
                size: 16
              }
            },
            legend: {
              display: false
            },
            tooltip: {
              callbacks: {
                afterLabel: function(context) {
                  const vj = top3[context.dataIndex];
                  return `Equipo: ${vj.equipo}`;
                }
              }
            }
          },
          scales: {
            x: {
              beginAtZero: true,
              max: 5,
              title: {
                display: true,
                text: 'Promedio'
              }
            }
          }
        }
      });
    }
    
    function crearGraficoDistribucion(distribucion) {
      const ctx = document.getElementById('distribucionChart').getContext('2d');
      
      new Chart(ctx, {
        type: 'bar',
        data: {
          labels: distribucion.map(d => d.nrc),
          datasets: [
            {
              label: 'Promedio por NRC',
              data: distribucion.map(d => d.promedio),
              backgroundColor: 'rgba(54, 162, 235, 0.7)',
              borderColor: 'rgba(54, 162, 235, 1)',
              borderWidth: 1,
              yAxisID: 'y'
            },
            {
              label: 'Cantidad de Videojuegos',
              data: distribucion.map(d => d.cantidad),
              backgroundColor: 'rgba(255, 99, 132, 0.7)',
              borderColor: 'rgba(255, 99, 132, 1)',
              borderWidth: 1,
              yAxisID: 'y1'
            }
          ]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            title: {
              display: true,
              text: 'Distribuci√≥n por Materia (NRC)',
              font: {
                size: 16
              }
            }
          },
          scales: {
            y: {
              beginAtZero: true,
              title: {
                display: true,
                text: 'Promedio'
              },
              max: 5
            },
            y1: {
              beginAtZero: true,
              position: 'right',
              grid: {
                drawOnChartArea: false
              },
              title: {
                display: true,
                text: 'Cantidad'
              }
            }
          }
        }
      });
    }
  </script>
</body>
</html> 