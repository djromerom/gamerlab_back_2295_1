<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Evaluación de Videojuego</title>
  <style>
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
      color: #333;
      background-color: #f8f9fa;
    }
    h1, h2, h3 {
      color: #2c3e50;
    }
    h1 {
      border-bottom: 2px solid #3498db;
      padding-bottom: 10px;
      margin-bottom: 20px;
    }
    .container {
      display: flex;
      gap: 30px;
    }
    .left-column {
      flex: 1;
    }
    .right-column {
      flex: 1;
    }
    .card {
      background-color: white;
      border-radius: 8px;
      padding: 20px;
      margin-bottom: 20px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .info-section {
      margin-bottom: 15px;
    }
    .info-section .label {
      font-weight: bold;
      color: #7f8c8d;
      margin-bottom: 5px;
    }
    .info-section .value {
      font-size: 1.1em;
      color: #2c3e50;
    }
    .promedio-total {
      background-color: #2980b9;
      color: white;
      border-radius: 4px;
      padding: 10px;
      font-size: 1.2em;
      font-weight: bold;
      text-align: center;
      margin: 10px 0;
    }
    table {
      width: 100%;
      border-collapse: collapse;
      margin: 15px 0;
    }
    th, td {
      border: 1px solid #ddd;
      padding: 10px;
      text-align: left;
    }
    th {
      background-color: #f2f2f2;
    }
    .rating {
      display: flex;
      padding-top: 5px;
    }
    .rating input {
      display: none;
    }
    .rating label {
      cursor: pointer;
      width: 40px;
      height: 40px;
      background-color: #eee;
      margin-right: 5px;
      text-align: center;
      line-height: 40px;
      border-radius: 4px;
      font-weight: bold;
    }
    .rating input:checked + label, 
    .rating input:hover + label {
      background-color: #2980b9;
      color: white;
    }
    .rating-display {
      font-weight: bold;
      padding: 5px 10px;
      border-radius: 4px;
      display: inline-block;
      text-align: center;
      min-width: 30px;
    }
    .rating-1 { background-color: #e74c3c; color: white; }
    .rating-2 { background-color: #e67e22; color: white; }
    .rating-3 { background-color: #f1c40f; color: white; }
    .rating-4 { background-color: #2ecc71; color: white; }
    .rating-5 { background-color: #27ae60; color: white; }
    
    .comentario {
      width: 100%;
      min-height: 80px;
      padding: 10px;
      border: 1px solid #ddd;
      border-radius: 4px;
      margin-top: 15px;
      font-family: inherit;
    }
    .btn {
      background-color: #2980b9;
      color: white;
      border: none;
      padding: 10px 20px;
      font-size: 1em;
      border-radius: 4px;
      cursor: pointer;
      font-weight: bold;
      margin-top: 15px;
    }
    .btn:hover {
      background-color: #3498db;
    }
    .jurado-evaluacion {
      border-left: 4px solid #3498db;
      padding-left: 15px;
      margin-bottom: 20px;
    }
    .jurado-info {
      display: flex;
      justify-content: space-between;
      margin-bottom: 10px;
    }
    .jurado-nombre {
      font-weight: bold;
      color: #2c3e50;
    }
    .jurado-rol {
      color: #7f8c8d;
      font-style: italic;
    }
    .tabs {
      display: flex;
      margin-bottom: 20px;
    }
    .tab {
      padding: 10px 20px;
      background-color: #eee;
      cursor: pointer;
      border-radius: 4px 4px 0 0;
      margin-right: 5px;
    }
    .tab.active {
      background-color: white;
      font-weight: bold;
      border-top: 3px solid #3498db;
    }
    .tab-content {
      display: none;
    }
    .tab-content.active {
      display: block;
    }
    .volver {
      display: inline-block;
      margin-bottom: 20px;
      color: #2980b9;
      text-decoration: none;
    }
    .volver:hover {
      text-decoration: underline;
    }
    .chart-container {
      width: 100%;
      height: 300px !important;
      position: relative;
      margin-top: 10px;
      margin-bottom: 20px;
    }
    #radar-content {
      min-height: 300px;
    }
    .radar-container {
      background-color: white;
      border-radius: 8px;
      padding: 20px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.05);
      margin-top: 20px;
      margin-bottom: 20px;
      max-width: 600px;
      margin-left: auto;
      margin-right: auto;
    }
    .chart-title {
      text-align: center;
      font-size: 16px;
      font-weight: bold;
      margin-bottom: 20px;
      color: #333;
    }
  </style>
</head>
<body>
  <a href="/" class="volver">← Volver a la lista</a>
  <h1>Evaluación de Videojuego</h1>
  
  <div id="loading">Cargando datos...</div>
  <div id="app" style="display: none;">
    <div class="container">
      <div class="left-column">
        <div class="card">
          <h2 id="videojuego-nombre"></h2>
          <div class="info-section">
            <div class="label">Equipo</div>
            <div class="value" id="equipo-nombre"></div>
          </div>
          <div class="tabs">
            <div class="tab active" data-tab="barras">Gráfico de Barras</div>
            <div class="tab" data-tab="radar">Gráfico de Radar</div>
          </div>
          <div class="tab-content active" id="barras-content">
            <div class="chart-container" style="height:350px !important;">
              <canvas id="barChart"></canvas>
            </div>
          </div>
          <div class="tab-content" id="radar-content">
            <div class="chart-container" style="height:350px !important; width:100% !important;">
              <canvas id="radarChart" width="400" height="400" style="display:block; height:350px !important; width:100% !important;"></canvas>
            </div>
          </div>
          <div class="promedio-total">
            Promedio Total: <span id="promedio-total">-</span>
          </div>
        </div>
        
        <div class="card">
          <h3>Criterios evaluados</h3>
          <table id="criterios-table">
            <thead>
              <tr>
                <th>Criterio</th>
                <th>Descripción</th>
                <th>Promedio</th>
              </tr>
            </thead>
            <tbody id="criterios-body">
              <!-- Se llenará dinámicamente -->
            </tbody>
          </table>
        </div>
      </div>
      
      <div class="right-column">
        <div class="tabs">
          <div class="tab active" data-tab="evaluaciones">Evaluaciones individuales</div>
          <div class="tab" data-tab="calificar">Calificar videojuego</div>
        </div>
        
        <div class="tab-content active" id="evaluaciones-content">
          <div class="card">
            <h3>Evaluaciones de los jurados</h3>
            <div id="evaluaciones-container">
              <!-- Se llenará dinámicamente -->
            </div>
          </div>
        </div>
        
        <div class="tab-content" id="calificar-content">
          <div class="card">
            <h3>Formulario de calificación</h3>
            <form id="form-calificacion">
              <table>
                <thead>
                  <tr>
                    <th>Criterio</th>
                    <th>Descripción breve</th>
                    <th>Valoración (1-5)</th>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td>Interfaz de Usuario</td>
                    <td>Diseño, colores, usabilidad</td>
                    <td>
                      <div class="rating">
                        <input type="radio" name="interfaz" value="1" id="interfaz-1">
                        <label for="interfaz-1">1</label>
                        <input type="radio" name="interfaz" value="2" id="interfaz-2">
                        <label for="interfaz-2">2</label>
                        <input type="radio" name="interfaz" value="3" id="interfaz-3">
                        <label for="interfaz-3">3</label>
                        <input type="radio" name="interfaz" value="4" id="interfaz-4">
                        <label for="interfaz-4">4</label>
                        <input type="radio" name="interfaz" value="5" id="interfaz-5">
                        <label for="interfaz-5">5</label>
                      </div>
                    </td>
                  </tr>
                  <tr>
                    <td>Interacción</td>
                    <td>Controles, guía al usuario, intuitividad</td>
                    <td>
                      <div class="rating">
                        <input type="radio" name="interaccion" value="1" id="interaccion-1">
                        <label for="interaccion-1">1</label>
                        <input type="radio" name="interaccion" value="2" id="interaccion-2">
                        <label for="interaccion-2">2</label>
                        <input type="radio" name="interaccion" value="3" id="interaccion-3">
                        <label for="interaccion-3">3</label>
                        <input type="radio" name="interaccion" value="4" id="interaccion-4">
                        <label for="interaccion-4">4</label>
                        <input type="radio" name="interaccion" value="5" id="interaccion-5">
                        <label for="interaccion-5">5</label>
                      </div>
                    </td>
                  </tr>
                  <tr>
                    <td>Resultados</td>
                    <td>Reacciones, recompensas, retroalimentación visual</td>
                    <td>
                      <div class="rating">
                        <input type="radio" name="resultados" value="1" id="resultados-1">
                        <label for="resultados-1">1</label>
                        <input type="radio" name="resultados" value="2" id="resultados-2">
                        <label for="resultados-2">2</label>
                        <input type="radio" name="resultados" value="3" id="resultados-3">
                        <label for="resultados-3">3</label>
                        <input type="radio" name="resultados" value="4" id="resultados-4">
                        <label for="resultados-4">4</label>
                        <input type="radio" name="resultados" value="5" id="resultados-5">
                        <label for="resultados-5">5</label>
                      </div>
                    </td>
                  </tr>
                  <tr>
                    <td>Presentación del Proyecto</td>
                    <td>Claridad, coherencia, comunicación del objetivo</td>
                    <td>
                      <div class="rating">
                        <input type="radio" name="presentacion" value="1" id="presentacion-1">
                        <label for="presentacion-1">1</label>
                        <input type="radio" name="presentacion" value="2" id="presentacion-2">
                        <label for="presentacion-2">2</label>
                        <input type="radio" name="presentacion" value="3" id="presentacion-3">
                        <label for="presentacion-3">3</label>
                        <input type="radio" name="presentacion" value="4" id="presentacion-4">
                        <label for="presentacion-4">4</label>
                        <input type="radio" name="presentacion" value="5" id="presentacion-5">
                        <label for="presentacion-5">5</label>
                      </div>
                    </td>
                  </tr>
                  <tr>
                    <td>Funcionamiento del Programa</td>
                    <td>Que no tenga errores y cumpla su propósito</td>
                    <td>
                      <div class="rating">
                        <input type="radio" name="funcionamiento" value="1" id="funcionamiento-1">
                        <label for="funcionamiento-1">1</label>
                        <input type="radio" name="funcionamiento" value="2" id="funcionamiento-2">
                        <label for="funcionamiento-2">2</label>
                        <input type="radio" name="funcionamiento" value="3" id="funcionamiento-3">
                        <label for="funcionamiento-3">3</label>
                        <input type="radio" name="funcionamiento" value="4" id="funcionamiento-4">
                        <label for="funcionamiento-4">4</label>
                        <input type="radio" name="funcionamiento" value="5" id="funcionamiento-5">
                        <label for="funcionamiento-5">5</label>
                      </div>
                    </td>
                  </tr>
                  <tr>
                    <td>Presentación personal del equipo</td>
                    <td>Lenguaje corporal, presencia, orden y seguridad al exponer</td>
                    <td>
                      <div class="rating">
                        <input type="radio" name="presentacion_personal" value="1" id="presentacion_personal-1">
                        <label for="presentacion_personal-1">1</label>
                        <input type="radio" name="presentacion_personal" value="2" id="presentacion_personal-2">
                        <label for="presentacion_personal-2">2</label>
                        <input type="radio" name="presentacion_personal" value="3" id="presentacion_personal-3">
                        <label for="presentacion_personal-3">3</label>
                        <input type="radio" name="presentacion_personal" value="4" id="presentacion_personal-4">
                        <label for="presentacion_personal-4">4</label>
                        <input type="radio" name="presentacion_personal" value="5" id="presentacion_personal-5">
                        <label for="presentacion_personal-5">5</label>
                      </div>
                    </td>
                  </tr>
                </tbody>
              </table>
              
              <textarea class="comentario" placeholder="Comentarios adicionales (opcional)" id="comentario"></textarea>
              
              <button type="submit" class="btn">Enviar calificación</button>
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Agregar Chart.js -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  
  <script>
    // Verificar que Chart.js se cargó correctamente
    console.log('¿Chart.js cargado?', typeof Chart !== 'undefined');
    if (typeof Chart === 'undefined') {
      alert('Error: No se pudo cargar Chart.js. Por favor, intente recargar la página.');
    }
    
    // Obtener el ID del videojuego de la URL
    const params = new URLSearchParams(window.location.search);
    const videojuegoId = params.get('id');
    
    // Variables para almacenar datos globales
    let videojuego = null;
    let evaluaciones = [];
    let barChart = null;
    let radarChart = null;
    
    // Función simple para cambiar entre pestañas
    document.querySelectorAll('.tab').forEach(tab => {
      tab.addEventListener('click', () => {
        console.log('Tab clicked:', tab.dataset.tab);
        
        // Identificar el grupo de pestañas
        const parent = tab.closest('.tabs');
        
        // Desactivar todas las pestañas en este grupo
        parent.querySelectorAll('.tab').forEach(t => {
          t.classList.remove('active');
        });
        
        // Activar la pestaña seleccionada
        tab.classList.add('active');
        
        // Obtener el ID del contenido a mostrar
        const contentId = `${tab.dataset.tab}-content`;
        console.log('Activando contenido:', contentId);
        
        // Ocultar todos los contenidos relacionados con este grupo de pestañas
        document.querySelectorAll('.tab-content').forEach(content => {
          // Para las pestañas de gráficos
          if (tab.dataset.tab === 'barras' || tab.dataset.tab === 'radar') {
            if (content.id === 'barras-content' || content.id === 'radar-content') {
              content.classList.remove('active');
            }
          }
          // Para las pestañas de evaluaciones/calificar
          else if (tab.dataset.tab === 'evaluaciones' || tab.dataset.tab === 'calificar') {
            if (content.id === 'evaluaciones-content' || content.id === 'calificar-content') {
              content.classList.remove('active');
            }
          }
        });
        
        // Mostrar el contenido seleccionado
        const selectedContent = document.getElementById(contentId);
        if (selectedContent) {
          selectedContent.classList.add('active');
          console.log('Content activated:', contentId);
          
          // Si es la pestaña del radar chart, asegurarnos de que se renderice correctamente
          if (tab.dataset.tab === 'radar') {
            console.log('Pestaña de radar seleccionada, renderizando radar chart');
            setTimeout(() => {
              if (radarChart) {
                radarChart.update();
                console.log('Radar chart actualizado');
              } else {
                // Si por alguna razón el radar chart no existe, crearlo
                console.log('Radar chart no existe, creándolo de nuevo');
                crearRadarChartSimple();
              }
            }, 100);
          }
        } else {
          console.error('No se encontró el contenido:', contentId);
        }
      });
    });
    
    // Función para cargar datos del videojuego
    async function cargarDatos() {
      try {
        document.getElementById('loading').textContent = 'Cargando datos del videojuego...';
        
        // Obtener datos del videojuego
        const response = await fetch(`/evaluaciones/consolidacion/${videojuegoId}`);
        videojuego = await response.json();
        
        // Actualizar la interfaz con los datos recibidos
        document.getElementById('videojuego-nombre').textContent = videojuego.nombre_videojuego;
        document.getElementById('equipo-nombre').textContent = videojuego.equipo;
        document.getElementById('promedio-total').textContent = videojuego.promedio_total.toFixed(2);
        
        // Actualizar la tabla de criterios
        const criteriosBody = document.getElementById('criterios-body');
        criteriosBody.innerHTML = '';
        
        videojuego.criterios.forEach(criterio => {
          const tr = document.createElement('tr');
          
          const tdNombre = document.createElement('td');
          tdNombre.textContent = criterio.nombre;
          
          const tdDescripcion = document.createElement('td');
          tdDescripcion.textContent = criterio.descripcion || 'No hay descripción disponible';
          
          const tdPromedio = document.createElement('td');
          const spanPromedio = document.createElement('span');
          spanPromedio.className = `rating-display rating-${Math.round(criterio.promedio)}`;
          spanPromedio.textContent = criterio.promedio.toFixed(2);
          tdPromedio.appendChild(spanPromedio);
          
          tr.appendChild(tdNombre);
          tr.appendChild(tdDescripcion);
          tr.appendChild(tdPromedio);
          
          criteriosBody.appendChild(tr);
        });
        
        // Crear gráficos con los datos
        crearGraficosAnalisis(videojuego);
        
        // Cargar evaluaciones
        const responseEvaluaciones = await fetch(`/evaluaciones/evaluaciones/${videojuegoId}`);
        evaluaciones = await responseEvaluaciones.json();
        
        // Mostrar evaluaciones individuales si las hay
        if (evaluaciones && evaluaciones.length > 0) {
          mostrarEvaluaciones();
        }
        
        // Mostrar la aplicación y ocultar el mensaje de carga
        document.getElementById('app').style.display = 'block';
        document.getElementById('loading').style.display = 'none';
        
        // Asegurarse de que el radar chart se renderice después de que todo esté cargado
        setTimeout(() => {
          console.log('Verificando y actualizando radar chart después de cargar datos');
          if (!radarChart) {
            console.log('Radar chart no existe después de cargar datos, creándolo');
            crearRadarChartSimple();
          } else {
            console.log('Actualizando radar chart existente');
            radarChart.update();
          }
        }, 500);
        
      } catch (error) {
        console.error('Error al cargar datos:', error);
        document.getElementById('loading').textContent = 'Error al cargar datos. Por favor, intente nuevamente.';
      }
    }
    
    // Función para crear el radar chart con un enfoque simplificado
    function crearRadarChartSimple() {
      console.log('Creando radar chart simplificado');
      
      // Destruir el chart anterior si existe
      if (radarChart) {
        radarChart.destroy();
        radarChart = null;
      }
      
      // Usamos los datos reales del videojuego si están disponibles
      if (videojuego && videojuego.criterios) {
        // Datos reales
        const labels = videojuego.criterios.map(c => c.nombre);
        const promedios = videojuego.criterios.map(c => parseFloat(c.promedio) || 0);
        
        const data = {
          labels: labels,
          datasets: [{
            label: 'Promedio',
            data: promedios,
            fill: true,
            backgroundColor: 'rgba(255, 99, 132, 0.2)',
            borderColor: 'rgb(255, 99, 132)',
            pointBackgroundColor: 'rgb(255, 99, 132)',
            pointBorderColor: '#fff',
            pointHoverBackgroundColor: '#fff',
            pointHoverBorderColor: 'rgb(255, 99, 132)'
          }]
        };
        
        // Configuración optimizada
        const config = {
          type: 'radar',
          data: data,
          options: {
            responsive: true,
            maintainAspectRatio: false,
            elements: {
              line: {
                borderWidth: 2
              }
            },
            scales: {
              r: {
                angleLines: {
                  display: true,
                  color: 'rgba(0, 0, 0, 0.1)'
                },
                grid: {
                  color: 'rgba(0, 0, 0, 0.1)'
                },
                pointLabels: {
                  font: {
                    size: 12,
                    weight: 'normal'
                  },
                  color: '#666'
                },
                beginAtZero: true,
                suggestedMin: 0,
                suggestedMax: 5,
                ticks: {
                  display: false,
                  stepSize: 1,
                  backdropColor: 'transparent',
                  font: {
                    size: 10
                  }
                }
              }
            },
            plugins: {
              title: {
                display: true,
                text: 'Comparativa de Criterios',
                font: {
                  size: 16,
                  weight: 'bold'
                },
                padding: {
                  top: 10,
                  bottom: 20
                }
              },
              legend: {
                position: 'top',
                align: 'center',
                labels: {
                  boxWidth: 40,
                  usePointStyle: true,
                  padding: 10,
                  font: {
                    size: 12
                  }
                }
              }
            }
          }
        };
        
        // Obtener el canvas y crear el chart
        const ctx = document.getElementById('radarChart');
        if (!ctx) {
          console.error('No se encontró el elemento canvas radarChart');
          return;
        }
        
        try {
          radarChart = new Chart(ctx, config);
          console.log('Radar chart creado con éxito usando datos reales');
        } catch (error) {
          console.error('Error al crear el radar chart:', error);
        }
      } else {
        // Usar datos de ejemplo si no hay datos reales
        console.log('No hay datos del videojuego, usando datos de ejemplo');
        
        // Configuración simplificada con datos de ejemplo
        const data = {
          labels: [
            'Interfaz de Usuario',
            'Interacción',
            'Resultados',
            'Presentación del Proyecto',
            'Funcionamiento del Programa',
            'Presentación personal del equipo'
          ],
          datasets: [{
            label: 'Promedio',
            data: [4.2, 3.8, 4.5, 3.9, 4.0, 3.7],
            fill: true,
            backgroundColor: 'rgba(255, 99, 132, 0.2)',
            borderColor: 'rgb(255, 99, 132)',
            pointBackgroundColor: 'rgb(255, 99, 132)',
            pointBorderColor: '#fff',
            pointHoverBackgroundColor: '#fff',
            pointHoverBorderColor: 'rgb(255, 99, 132)'
          }]
        };
        
        const config = {
          type: 'radar',
          data: data,
          options: {
            responsive: true,
            maintainAspectRatio: false,
            elements: {
              line: {
                borderWidth: 2
              }
            },
            scales: {
              r: {
                angleLines: {
                  display: true,
                  color: 'rgba(0, 0, 0, 0.1)'
                },
                grid: {
                  color: 'rgba(0, 0, 0, 0.1)'
                },
                pointLabels: {
                  font: {
                    size: 12
                  },
                  color: '#666'
                },
                beginAtZero: true,
                ticks: {
                  display: false,
                  backdropColor: 'transparent'
                }
              }
            },
            plugins: {
              title: {
                display: true,
                text: 'Comparativa de Criterios',
                font: {
                  size: 16,
                  weight: 'bold'
                }
              },
              legend: {
                position: 'top',
                align: 'center',
                labels: {
                  usePointStyle: true
                }
              }
            }
          }
        };
        
        const ctx = document.getElementById('radarChart');
        if (!ctx) {
          console.error('No se encontró el elemento canvas radarChart');
          return;
        }
        
        try {
          radarChart = new Chart(ctx, config);
          console.log('Radar chart creado con éxito usando datos de ejemplo');
        } catch (error) {
          console.error('Error al crear el radar chart:', error);
        }
      }
    }
    
    // Modificar la función crearGraficosAnalisis para usar el nuevo enfoque
    function crearGraficosAnalisis(datos) {
      const criterios = datos.criterios;
      
      // Preparar datos para gráficos
      const labels = criterios.map(c => c.nombre);
      const promedios = criterios.map(c => c.promedio);
      
      // Destruir gráficos anteriores si existen
      if (barChart) {
        barChart.destroy();
        barChart = null;
      }
      
      if (radarChart) {
        radarChart.destroy();
        radarChart = null;
      }
      
      // Gráfico de barras
      const ctxBar = document.getElementById('barChart');
      if (ctxBar) {
        barChart = new Chart(ctxBar, {
          type: 'bar',
          data: {
            labels: labels,
            datasets: [{
              label: 'Promedio por Criterio',
              data: promedios,
              backgroundColor: 'rgba(54, 162, 235, 0.7)',
              borderColor: 'rgba(54, 162, 235, 1)',
              borderWidth: 1
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              title: {
                display: true,
                text: 'Promedios por Criterio',
                font: {
                  size: 16
                }
              }
            },
            scales: {
              y: {
                beginAtZero: true,
                max: 5,
                title: {
                  display: true,
                  text: 'Promedio'
                }
              }
            }
          }
        });
      }
      
      // Crear el radar chart simplificado de ejemplo
      crearRadarChartSimple();
      
      // Una vez que confirmemos que el radar chart simplificado funciona,
      // podemos intentar con los datos reales
      // descomentar esta línea cuando el gráfico de ejemplo funcione:
      // crearRadarChartReal(datos);
    }
    
    // Función para crear el radar chart con datos reales
    function crearRadarChartReal(datos) {
      if (radarChart) {
        radarChart.destroy();
        radarChart = null;
      }
      
      const criterios = datos.criterios;
      const labels = criterios.map(c => c.nombre);
      const promedios = criterios.map(c => parseFloat(c.promedio) || 0);
      
      const data = {
        labels: labels,
        datasets: [{
          label: 'Promedio',
          data: promedios,
          fill: true,
          backgroundColor: 'rgba(255, 99, 132, 0.2)',
          borderColor: 'rgb(255, 99, 132)',
          pointBackgroundColor: 'rgb(255, 99, 132)',
          pointBorderColor: '#fff',
          pointHoverBackgroundColor: '#fff',
          pointHoverBorderColor: 'rgb(255, 99, 132)'
        }]
      };
      
      const config = {
        type: 'radar',
        data: data,
        options: {
          responsive: true,
          maintainAspectRatio: false,
          elements: {
            line: {
              borderWidth: 3
            }
          },
          scales: {
            r: {
              angleLines: {
                display: true
              },
              suggestedMin: 0,
              suggestedMax: 5,
              ticks: {
                stepSize: 1
              }
            }
          },
          plugins: {
            title: {
              display: true,
              text: 'Comparativa de Criterios',
              font: {
                size: 16
              }
            }
          }
        }
      };
      
      const ctx = document.getElementById('radarChart');
      if (!ctx) {
        console.error('No se encontró el elemento canvas radarChart');
        return;
      }
      
      try {
        radarChart = new Chart(ctx, config);
        console.log('Radar chart real creado con éxito');
      } catch (error) {
        console.error('Error al crear el radar chart real:', error);
      }
    }
    
    // Función para mostrar evaluaciones individuales
    function mostrarEvaluaciones() {
      const evaluacionesContainer = document.getElementById('evaluaciones-container');
      evaluacionesContainer.innerHTML = '';
      
      if (!evaluaciones || evaluaciones.length === 0) {
        evaluacionesContainer.innerHTML = '<p>No hay evaluaciones disponibles para este videojuego.</p>';
        return;
      }
      
      // Definimos un mapa de índices a nombres de criterios conocidos para cuando falten nombres
      const nombresCriteriosConocidos = [
        'Interfaz de Usuario',
        'Interacción',
        'Resultados',
        'Presentación del Proyecto',
        'Funcionamiento del Programa',
        'Presentación personal del equipo'
      ];
      
      evaluaciones.forEach(evaluacion => {
        const evaluacionDiv = document.createElement('div');
        evaluacionDiv.className = 'jurado-evaluacion';
        
        const juradoInfo = document.createElement('div');
        juradoInfo.className = 'jurado-info';
        
        const juradoNombre = document.createElement('div');
        juradoNombre.className = 'jurado-nombre';
        juradoNombre.textContent = evaluacion.jurado ? evaluacion.jurado.nombre || 'Jurado Anónimo' : 'Jurado Anónimo';
        
        const juradoRol = document.createElement('div');
        juradoRol.className = 'jurado-rol';
        juradoRol.textContent = evaluacion.fecha_evaluacion ? new Date(evaluacion.fecha_evaluacion).toLocaleString() : 'Fecha desconocida';
        
        juradoInfo.appendChild(juradoNombre);
        juradoInfo.appendChild(juradoRol);
        
        evaluacionDiv.appendChild(juradoInfo);
        
        // Tabla de criterios evaluados
        const tabla = document.createElement('table');
        const thead = document.createElement('thead');
        const trHead = document.createElement('tr');
        
        const thCriterio = document.createElement('th');
        thCriterio.textContent = 'Criterio';
        
        const thValoracion = document.createElement('th');
        thValoracion.textContent = 'Valoración';
        
        trHead.appendChild(thCriterio);
        trHead.appendChild(thValoracion);
        thead.appendChild(trHead);
        tabla.appendChild(thead);
        
        const tbody = document.createElement('tbody');
        
        // Verificar si hay criterios en la evaluación
        if (evaluacion.criterios && evaluacion.criterios.length > 0) {
          // Evaluar si los criterios tienen nombres o solo valores
          const criteriosSinNombre = evaluacion.criterios.some(c => !c.nombre || c.nombre.trim() === '');
          
          evaluacion.criterios.forEach((criterio, index) => {
            const tr = document.createElement('tr');
            
            const tdCriterio = document.createElement('td');
            // Si el criterio no tiene nombre, intentamos usar el nombre conocido según su índice
            if (criteriosSinNombre || !criterio.nombre) {
              tdCriterio.textContent = index < nombresCriteriosConocidos.length ? 
                nombresCriteriosConocidos[index] : `Criterio ${index + 1}`;
            } else {
              tdCriterio.textContent = criterio.nombre;
            }
            
            const tdValoracion = document.createElement('td');
            const spanValoracion = document.createElement('span');
            
            // Determinar el valor de la valoración (puede estar en diferentes propiedades)
            let valoracion = 0;
            if (typeof criterio.valoracion !== 'undefined') {
              valoracion = criterio.valoracion;
            } else if (typeof criterio.valor !== 'undefined') {
              valoracion = criterio.valor;
            } else if (typeof criterio.value !== 'undefined') {
              valoracion = criterio.value;
            } else if (typeof criterio.promedio !== 'undefined') {
              valoracion = criterio.promedio;
            }
            
            spanValoracion.className = `rating-display rating-${Math.round(valoracion)}`;
            spanValoracion.textContent = typeof valoracion === 'number' ? valoracion : valoracion.toString();
            tdValoracion.appendChild(spanValoracion);
            
            tr.appendChild(tdCriterio);
            tr.appendChild(tdValoracion);
            tbody.appendChild(tr);
          });
        } else {
          // Si no hay criterios, mostrar mensaje
          const tr = document.createElement('tr');
          const td = document.createElement('td');
          td.colSpan = 2;
          td.textContent = 'No hay criterios evaluados disponibles';
          tr.appendChild(td);
          tbody.appendChild(tr);
        }
        
        tabla.appendChild(tbody);
        evaluacionDiv.appendChild(tabla);
        
        // Comentarios
        if (evaluacion.comentario) {
          const comentarioDiv = document.createElement('div');
          comentarioDiv.style.marginTop = '10px';
          
          const comentarioLabel = document.createElement('strong');
          comentarioLabel.textContent = 'Comentarios: ';
          
          const comentarioText = document.createElement('p');
          comentarioText.style.margin = '5px 0';
          comentarioText.textContent = evaluacion.comentario;
          
          comentarioDiv.appendChild(comentarioLabel);
          comentarioDiv.appendChild(comentarioText);
          evaluacionDiv.appendChild(comentarioDiv);
        }
        
        evaluacionesContainer.appendChild(evaluacionDiv);
      });
    }
    
    // Iniciar carga de datos cuando se cargue la página
    window.addEventListener('DOMContentLoaded', cargarDatos);
  </script>
</body>
</html> 